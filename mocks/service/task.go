// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	dto "ggl_test/models/dto"
	entity "ggl_test/models/entity"
	customerror "ggl_test/utils/customerror"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITaskService is a mock of ITaskService interface.
type MockITaskService struct {
	ctrl     *gomock.Controller
	recorder *MockITaskServiceMockRecorder
}

// MockITaskServiceMockRecorder is the mock recorder for MockITaskService.
type MockITaskServiceMockRecorder struct {
	mock *MockITaskService
}

// NewMockITaskService creates a new mock instance.
func NewMockITaskService(ctrl *gomock.Controller) *MockITaskService {
	mock := &MockITaskService{ctrl: ctrl}
	mock.recorder = &MockITaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskService) EXPECT() *MockITaskServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockITaskService) Add(c *dto.AppContext, task *entity.Task) (*entity.Task, *customerror.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", c, task)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(*customerror.CustomError)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockITaskServiceMockRecorder) Add(c, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockITaskService)(nil).Add), c, task)
}

// GetAll mocks base method.
func (m *MockITaskService) GetAll(c *dto.AppContext) (*[]entity.Task, *customerror.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", c)
	ret0, _ := ret[0].(*[]entity.Task)
	ret1, _ := ret[1].(*customerror.CustomError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockITaskServiceMockRecorder) GetAll(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockITaskService)(nil).GetAll), c)
}

// Update mocks base method.
func (m *MockITaskService) Update(c *dto.AppContext, id int64, task *entity.Task) (*entity.Task, *customerror.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, id, task)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(*customerror.CustomError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITaskServiceMockRecorder) Update(c, id, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITaskService)(nil).Update), c, id, task)
}
